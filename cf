#!/usr/bin/env bash
# Claude-Flow final working wrapper
# This completely bypasses TTY checks by using a detached process

# Get the current directory
PROJECT_DIR="${PWD}"
COMMAND="$*"

# Create a launcher script that will run in the background
LAUNCHER_SCRIPT="/tmp/claude-flow-launcher-$$.sh"
cat > "${LAUNCHER_SCRIPT}" << 'EOF'
#!/bin/bash
cd "PROJECT_DIR_PLACEHOLDER"

# Set environment to bypass TTY checks
export CI=1
export NO_COLOR=1
export FORCE_COLOR=0
export NODE_NO_READLINE=1
export DEBIAN_FRONTEND=noninteractive

# Run claude-flow
exec claude-flow COMMAND_PLACEHOLDER
EOF

# Replace placeholders
sed -i "s|PROJECT_DIR_PLACEHOLDER|${PROJECT_DIR}|g" "${LAUNCHER_SCRIPT}"
sed -i "s|COMMAND_PLACEHOLDER|${COMMAND}|g" "${LAUNCHER_SCRIPT}"
chmod +x "${LAUNCHER_SCRIPT}"

# Create output file
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
OUTPUT_FILE="${PROJECT_DIR}/claude-flow-${TIMESTAMP}.log"

echo "🚀 Claude-Flow TTY Bypass Wrapper"
echo "📝 Output: ${OUTPUT_FILE}"
echo "⏳ Starting..."
echo ""

# Run the launcher in a completely detached way using setsid
setsid bash -c "${LAUNCHER_SCRIPT} > '${OUTPUT_FILE}' 2>&1" &
PID=$!

# Give it a moment to start
sleep 0.5

# Check if process started
if kill -0 "${PID}" 2>/dev/null; then
    echo "✅ Started successfully (PID: ${PID})"
    echo "📊 Following output..."
    echo "────────────────────────────────────────────────────────────"
    
    # Follow the output
    tail -f "${OUTPUT_FILE}" &
    TAIL_PID=$!
    
    # Wait for the process to complete
    wait "${PID}" 2>/dev/null
    EXIT_CODE=$?
    
    # Stop tail
    kill "${TAIL_PID}" 2>/dev/null
    
    echo ""
    echo "────────────────────────────────────────────────────────────"
    echo "✅ Completed with exit code: ${EXIT_CODE}"
else
    echo "❌ Failed to start claude-flow"
    cat "${OUTPUT_FILE}" 2>/dev/null
    EXIT_CODE=1
fi

# Cleanup
rm -f "${LAUNCHER_SCRIPT}"

exit ${EXIT_CODE}
